--- /home/lukas/git/benchmark_harness/benchmarks/polybench_seq/3mm/code/linear-algebra/kernels/3mm/3mm.c	2024-01-05 16:33:04.571279588 +0100
+++ /home/lukas/git/benchmark_harness/benchmarks/polybench_seq/3mm/code/linear-algebra/kernels/3mm/3mm.c.discopop_patch_generator.temp	2024-01-05 16:35:02.227943006 +0100
@@ -29,11 +29,14 @@
   int i, j;
 
   for (i = 0; i < ni; i++)
+    #pragma omp parallel for private(j) shared(A,i,ni,nk) 
     for (j = 0; j < nk; j++)
       A[i][j] = ((DATA_TYPE) i*j) / ni;
   for (i = 0; i < nk; i++)
+    #pragma omp parallel for private(j) shared(B,i,nj) 
     for (j = 0; j < nj; j++)
       B[i][j] = ((DATA_TYPE) i*(j+1)) / nj;
+  #pragma omp parallel for private(i,j) shared(C,nj,nl,nm) 
   for (i = 0; i < nj; i++)
     for (j = 0; j < nm; j++)
       C[i][j] = ((DATA_TYPE) i*(j+3)) / nl;
@@ -75,6 +78,7 @@
   int i, j, k;
 
   /* E := A*B */
+  #pragma omp parallel for private(i,j,k) shared(A,B,E,ni,nj,nk) 
   for (i = 0; i < _PB_NI; i++)
     for (j = 0; j < _PB_NJ; j++)
       {
@@ -83,6 +87,7 @@
 	  E[i][j] += A[i][k] * B[k][j];
       }
   /* F := C*D */
+  #pragma omp parallel for private(i,j,k) shared(C,D,F,nj,nl,nm) 
   for (i = 0; i < _PB_NJ; i++)
     for (j = 0; j < _PB_NL; j++)
       {
@@ -91,6 +96,7 @@
 	  F[i][j] += C[i][k] * D[k][j];
       }
   /* G := E*F */
+  #pragma omp parallel for private(i,j,k) shared(E,F,G,ni,nj,nl) 
   for (i = 0; i < _PB_NI; i++)
     for (j = 0; j < _PB_NL; j++)
       {
